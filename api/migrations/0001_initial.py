# Generated by Django 5.2.4 on 2025-07-08 09:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlarmLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('source_type', models.CharField(max_length=32)),
                ('source_id', models.BigIntegerField()),
                ('time', models.DateTimeField()),
                ('method', models.CharField(max_length=32)),
                ('receiver', models.CharField(max_length=64)),
                ('result', models.CharField(blank=True, max_length=64, null=True)),
            ],
            options={
                'verbose_name': '报警记录',
                'verbose_name_plural': '报警记录',
                'db_table': 'alarm_logs',
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('location', models.CharField(max_length=128)),
                ('stream_url', models.CharField(max_length=255)),
                ('camera_type', models.CharField(max_length=32)),
                ('is_active', models.BooleanField()),
            ],
            options={
                'verbose_name': '摄像头信息',
                'verbose_name_plural': '摄像头信息',
                'db_table': 'cameras',
            },
        ),
        migrations.CreateModel(
            name='DetectionLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('camera_id', models.BigIntegerField()),
                ('object_class', models.CharField(max_length=32)),
                ('confidence', models.FloatField()),
                ('bbox', models.TextField()),
                ('time', models.DateTimeField()),
                ('image_path', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': '目标检测日志',
                'verbose_name_plural': '目标检测日志',
                'db_table': 'detection_logs',
            },
        ),
        migrations.CreateModel(
            name='IncidentDetectionLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('incident_type_id', models.BigIntegerField()),
                ('camera_id', models.BigIntegerField()),
                ('time', models.DateTimeField()),
                ('video_clip_path', models.CharField(max_length=255)),
                ('confidence', models.FloatField()),
                ('status', models.PositiveSmallIntegerField()),
            ],
            options={
                'verbose_name': '危险行为检测日志',
                'verbose_name_plural': '危险行为检测日志',
                'db_table': 'incident_detection_logs',
            },
        ),
        migrations.CreateModel(
            name='IncidentType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('code', models.CharField(max_length=32)),
            ],
            options={
                'verbose_name': '危险行为类型',
                'verbose_name_plural': '危险行为类型',
                'db_table': 'incident_types',
            },
        ),
        migrations.CreateModel(
            name='OperationLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_id', models.BigIntegerField()),
                ('action', models.CharField(max_length=64)),
                ('ip', models.CharField(max_length=45)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': '操作日志',
                'verbose_name_plural': '操作日志',
                'db_table': 'operation_log',
            },
        ),
        migrations.CreateModel(
            name='RecognitionLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('person_id', models.BigIntegerField()),
                ('camera_id', models.BigIntegerField()),
                ('time', models.DateTimeField()),
                ('confidence', models.FloatField()),
                ('image_path', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': '识别日志',
                'verbose_name_plural': '识别日志',
                'db_table': 'recognition_log',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('face_image_path', models.CharField(max_length=255)),
                ('face_embedding', models.TextField()),
            ],
            options={
                'verbose_name': '主体',
                'verbose_name_plural': '主体',
                'db_table': 'person',
            },
        ),
        migrations.CreateModel(
            name='WarningZone',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('camera_id', models.BigIntegerField()),
                ('name', models.CharField(max_length=64)),
                ('zone_type', models.PositiveSmallIntegerField()),
                ('zone_points', models.TextField()),
                ('is_active', models.BooleanField()),
            ],
            options={
                'verbose_name': '预警区域',
                'verbose_name_plural': '预警区域',
                'db_table': 'warning_zones',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role_id', models.BigIntegerField()),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
